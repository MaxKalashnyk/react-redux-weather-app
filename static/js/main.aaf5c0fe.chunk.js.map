{"version":3,"sources":["actions/unit.js","reducers/units.js","actions/place.js","reducers/place.js","actions/themeColor.js","reducers/theme.js","utils/constants.js","services/dataService.js","actions/forecastData.js","reducers/forecast.js","actions/updateCurrentForecast.js","reducers/currentForecast.js","actions/updateHistoryList.js","reducers/historyList.js","actions/updateFavouritesList.js","reducers/favouritesList.js","reducers/index.js","store/configureStore.js","components/FavouritesButton/FavouritesButton.js","components/UnitsSwitcher/UnitsSwitcher.js","components/Searchbar/SearchBar.js","containers/SearchBarContainer.js","components/CurrentForecast/CurrentForecast.js","components/WeatherForecastItem/WeatherForecastItem.js","components/WeatherForecast/WeatherForecast.js","containers/WeatherForecastContainer.js","components/ActivityListItem/ActivityListItem.js","components/FavouritesList/FavouritesList.js","containers/FavouritesListContainer.js","components/HistoryList/HistoryList.js","containers/HistoryListContainer.js","components/ThemeColorSwitcher/ThemeColorSwitcher.js","components/App/App.js","index.js"],"names":["SET_UNIT","initialState","unit","localStorage","getItem","JSON","parse","SET_PLACE","setPlace","place","type","payload","placeId","formattedPlace","isFavourite","SET_THEME_COLOR","color","apiKey","generateIconClass","iconString","generateID","Math","random","toString","substr","colorsList","unitsList","name","degreesUnit","getDayFromDateString","milliseconds","arguments","length","undefined","Intl","DateTimeFormat","weekday","format","convertTemperatureUnits","value","units","concat","round","HttpService","Object","classCallCheck","this","createClass","key","url","city","urlsArray","getWeatherURLS","Promise","all","map","u","fetch","then","responses","res","json","requestURL","response","catch","error","console","REQUEST","REQUEST_SUCCESS","REQUEST_FAIL","handleForecastData","dispatch","getWeatherData","err","data","isFetching","CURRENT_FORECAST","updateCurrentForecast","currentForecastData","UPDATE_HISTORY_LIST","updateHistoryList","historyList","UPDATE_FAVOURITES_LIST","updateFavouritesList","favouritesList","rootReducer","combineReducers","state","action","setItem","stringify","objectSpread","assign","forecastData","store","createStore","applyMiddleware","thunk","logger","FavouritesButton","_Component","possibleConstructorReturn","getPrototypeOf","apply","inherits","_this$props","props","updateButtonClass","find","item","updatedFavPlaceObj","filteredList","filter","push","toConsumableArray","_this","checkActiveClass","react_default","a","createElement","className","onClick","checkPlaceInFavouritesList","Component","connect","UnitsSwitcher","_ref","_ref2","target","onChange","switchUnit","renderTemplateList","SearchBar","call","getDataStatusCode","cod","inputRef","React","createRef","checkPlaceInHistoryList","bind","assertThisInitialized","placeInfo","handleHistoryList","formattedPlaceName","formatted_address","split","handleCurrentForecastData","place_id","placeObj","address_components","long_name","current","refs","input","setPlaceAction","components_FavouritesButton_FavouritesButton","react_google_autocomplete_default","onPlaceSelected","performSearch","autoFocus","ref","components_UnitsSwitcher_UnitsSwitcher","SearchBarContainer","getForecastDataAction","setCurrentForecastAction","updateHistoryListAction","Searchbar_SearchBar","page","CurrentForecast","pressureValue","_this$props$forecastD","dt","main","wind","weather","setIconClassName","icon","date","Date","getcurrentDateString","pressure","speed","toFixed","degrees","windDirectionString","defineWindDirection","deg","humidity","description","temp_min","temp_max","temp","renderTemplate","log","WeatherForecastItem","updateHandler","dateString","firstStringPartArray","formatDateValue","dt_txt","WeatherForecast","currentForecast","setCurrentForecast","dataCode","finalDaysForecastList","list","hoursForecastList","forEach","createSortedList","weatherForecastItemsList","components_WeatherForecastItem_WeatherForecastItem","finalCurrentForecastData","components_CurrentForecast_CurrentForecast","renderCurrentForecastFromItems","WeatherForecastContainer","components_WeatherForecast_WeatherForecast","ActivityListItem","updateForecast","FavouritesList","favouritesListRef","PerfectScrollbar","components_ActivityListItem_ActivityListItem","clearFavouritesList","renderFavouritesList","FavouritesListContainer","components_FavouritesList_FavouritesList","HistoryList","historyListRef","clearHistoryList","renderHistoryItemsList","HistoryListContainer","components_HistoryList_HistoryList","ThemeColorSwitcher","themeColor","changeColorThemeHandler","checked","App","components_ThemeColorSwitcher_ThemeColorSwitcher","containers_SearchBarContainer","containers_WeatherForecastContainer","containers_FavouritesListContainer","containers_HistoryListContainer","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.aaf5c0fe.chunk.js","sourcesContent":["export const SET_UNIT = \"SET_UNIT\";\r\n\r\nexport const setUnit = unit => ({\r\n    type: SET_UNIT,\r\n    payload: unit\r\n});\r\n","import { SET_UNIT } from \"../actions/unit\";\r\n\r\nconst defaultUnit = localStorage.getItem(\"unit\")\r\n    ? JSON.parse(localStorage.getItem(\"unit\"))\r\n    : \"Metric\";\r\n\r\nexport const initialState = {\r\n    unit: defaultUnit\r\n};\r\n\r\nexport function unitsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_UNIT:\r\n            localStorage.setItem(\"unit\", JSON.stringify(action.payload));\r\n            return { ...state, unit: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const SET_PLACE = \"SET_PLACE\";\r\n\r\nexport const setPlace = place => ({\r\n    type: SET_PLACE,\r\n    payload: place\r\n});\r\n","import { SET_PLACE } from \"../actions/place\";\r\n\r\nexport const initialState = {\r\n    place: \"Kyiv\",\r\n    placeId: \"\",\r\n    formattedPlace: \"\",\r\n    isFavourite: false\r\n};\r\n\r\nexport function placeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_PLACE:\r\n            return Object.assign({ ...state }, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const SET_THEME_COLOR = \"SET_THEME_COLOR\";\r\n\r\nexport const setThemeColor = color => ({\r\n    type: SET_THEME_COLOR,\r\n    payload: color\r\n});\r\n","import { SET_THEME_COLOR } from \"../actions/themeColor\";\r\n\r\nconst defaultThemeColor = localStorage.getItem(\"themeColor\")\r\n    ? JSON.parse(localStorage.getItem(\"themeColor\"))\r\n    : \"dark\";\r\n\r\nexport const initialState = {\r\n    color: defaultThemeColor\r\n};\r\n\r\nexport function themeColorReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_COLOR:\r\n            localStorage.setItem(\"themeColor\", JSON.stringify(action.payload));\r\n            return { ...state, color: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const pascalToMmHg = 0.75006;\r\nconst coefficientImperial = 2.2369;\r\n\r\nexport const currentWeaterURLString =\r\n    \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\nexport const weatherForecastURLString =\r\n    \"https://api.openweathermap.org/data/2.5/forecast?q=\";\r\nexport const apiKey = \"c1bfe9b98646ae15af74164518f99538\";\r\n\r\nexport const scrollableBlockWrapClassFavourite = \"user-activity-list-favourite\";\r\n\r\nexport const scrollableBlockWrapClassHistory = \"user-activity-list-history\";\r\n\r\nexport const formatValue = value => (value ? Math.round(value) : \"\");\r\n\r\nexport const checkProperty = property => (property ? property : \"\");\r\n\r\nexport const getCurrentDate = () => {\r\n    const currDate = new Date();\r\n    const day = String(currDate.getDate()).padStart(2, \"0\");\r\n    const month = String(currDate.getMonth() + 1).padStart(2, \"0\");\r\n    const year = currDate.getFullYear();\r\n    const finalDate = `${day}/${month}/${year}`;\r\n\r\n    return finalDate;\r\n};\r\n\r\nexport const getcurrentDateString = milliseconds => {\r\n    if (!milliseconds) {\r\n        return;\r\n    }\r\n\r\n    const date = new Date(milliseconds);\r\n    return new Intl.DateTimeFormat(\"en-GB\").format(date * 1000);\r\n};\r\n\r\nexport const getCurrentDayName = () => {\r\n    const currDate = new Date();\r\n    const days = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\"\r\n    ];\r\n    const day = new Date(currDate);\r\n    const dayName = days[day.getDay()];\r\n\r\n    return dayName;\r\n};\r\n\r\nexport const convertPressure = pressureValue => {\r\n    if (!pressureValue) {\r\n        return \"\";\r\n    }\r\n\r\n    return Math.round(pressureValue * pascalToMmHg);\r\n};\r\n\r\nexport const defineWindDirection = degrees => {\r\n    let windDirectionString = \"\";\r\n\r\n    if (!degrees) {\r\n        return \"\";\r\n    } else {\r\n        if (degrees <= 22.5 || (degrees > 337.5 && degrees <= 360)) {\r\n            windDirectionString = \"North\";\r\n        } else if (degrees > 22.5 && degrees < 67.5) {\r\n            windDirectionString = \"North-East\";\r\n        } else if (degrees > 67.5 && degrees < 112.5) {\r\n            windDirectionString = \"East\";\r\n        } else if (degrees > 112.5 && degrees < 157.5) {\r\n            windDirectionString = \"South-East\";\r\n        } else if (degrees > 157.5 && degrees < 202.5) {\r\n            windDirectionString = \"South\";\r\n        } else if (degrees > 202.5 && degrees < 247.5) {\r\n            windDirectionString = \"South-West\";\r\n        } else if (degrees > 247.5 && degrees < 292.5) {\r\n            windDirectionString = \"West\";\r\n        } else if (degrees > 292.5 && degrees < 337.5) {\r\n            windDirectionString = \"North-West\";\r\n        }\r\n\r\n        return windDirectionString;\r\n    }\r\n};\r\n\r\nexport const formatDateValue = dateString => {\r\n    if (!dateString) {\r\n        return;\r\n    }\r\n\r\n    const firstStringPartArray = dateString.split(\" \")[0].split(\"-\");\r\n\r\n    return `${firstStringPartArray[2]}/${firstStringPartArray[1]}`;\r\n};\r\n\r\nexport const generateIconClass = iconString => {\r\n    let finalIconClass = \"\";\r\n\r\n    if (!iconString) {\r\n        return;\r\n    } else {\r\n        if (iconString === \"01d\" || iconString === \"01n\") {\r\n            finalIconClass = \"day-forecast-weather-sunny\";\r\n        } else if (iconString === \"02d\" || iconString === \"02n\") {\r\n            finalIconClass = \"day-forecast-weather-cloudy-small\";\r\n        } else if (\r\n            iconString === \"03d\" ||\r\n            iconString === \"04d\" ||\r\n            iconString === \"50d\" ||\r\n            iconString === \"03n\" ||\r\n            iconString === \"04n\" ||\r\n            iconString === \"50n\"\r\n        ) {\r\n            finalIconClass = \"day-forecast-weather-cloudy\";\r\n        } else if (iconString === \"09d\" || iconString === \"09n\") {\r\n            finalIconClass = \"day-forecast-weather-shower-rain\";\r\n        } else if (iconString === \"10d\" || iconString === \"10n\") {\r\n            finalIconClass = \"day-forecast-weather-rain\";\r\n        } else if (iconString === \"11d\" || iconString === \"11n\") {\r\n            finalIconClass = \"day-forecast-weather-thunder\";\r\n        } else if (iconString === \"13d\" || iconString === \"13n\") {\r\n            finalIconClass = \"day-forecast-weather-snow\";\r\n        } else {\r\n            finalIconClass = \"\";\r\n        }\r\n    }\r\n\r\n    return finalIconClass;\r\n};\r\n\r\nexport const generateID = () => {\r\n    return (\r\n        \"_\" +\r\n        Math.random()\r\n            .toString(36)\r\n            .substr(2, 9)\r\n    );\r\n};\r\n\r\nexport const colorsList = [\"dark\", \"blue\", \"yellow\"];\r\n\r\nexport const unitsList = [\r\n    { name: \"Metric\", degreesUnit: \"°C\" },\r\n    { name: \"Imperial\", degreesUnit: \"°F\" }\r\n];\r\n\r\nexport const getDayFromDateString = (milliseconds, type = \"long\") => {\r\n    return new Intl.DateTimeFormat(\"en-US\", { weekday: type }).format(\r\n        milliseconds * 1000\r\n    );\r\n};\r\n\r\nexport const convertTemperatureUnits = (value, units) => {\r\n    if (!value) {\r\n        return;\r\n    }\r\n\r\n    return units === \"Metric\"\r\n        ? `${Math.round(value)} °C`\r\n        : `${Math.round(value * 1.8 + 32)} °F`;\r\n};\r\n\r\nexport const convertWindUnits = (value, units) => {\r\n    if (!value) {\r\n        return \"\";\r\n    }\r\n\r\n    return units === \"Metric\"\r\n        ? `${value.toFixed(1)} m/s`\r\n        : `${(value * coefficientImperial).toFixed(1)} mph`;\r\n};\r\n\r\nexport const checkResponse = response => {\r\n    if (response.data.status === \"ok\") {\r\n        return true;\r\n    } else if (response.data.message) {\r\n        const message = response.data.message.split(\"_\").join(\" \");\r\n        throw new Error(message);\r\n    }\r\n    throw new Error(\"Something wrong\");\r\n};\r\n","import { apiKey } from \"../utils/constants\";\r\nimport { currentWeaterURLString } from \"../utils/constants\";\r\nimport { weatherForecastURLString } from \"../utils/constants\";\r\n\r\nexport class HttpService {\r\n    getWeatherURLS(url, city) {\r\n        return `${url}${city}&appid=${apiKey}&units=metric`;\r\n    }\r\n\r\n    getWeatherData(city) {\r\n        const urlsArray = [\r\n            this.getWeatherURLS(currentWeaterURLString, city),\r\n            this.getWeatherURLS(weatherForecastURLString, city)\r\n        ];\r\n\r\n        return Promise.all(urlsArray.map(u => fetch(u))).then(responses =>\r\n            Promise.all(responses.map(res => res.json()))\r\n        );\r\n    }\r\n\r\n    getForecast(url, city) {\r\n        const requestURL = `${url}${city}&appid=${apiKey}&units=metric`;\r\n\r\n        return fetch(requestURL)\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n}\r\n\r\nexport default HttpService;\r\n","import { HttpService } from \"../services/dataService\";\r\n\r\nexport const REQUEST = \"REQUEST\";\r\nexport const REQUEST_SUCCESS = \"REQUEST_SUCCESS\";\r\nexport const REQUEST_FAIL = \"REQUEST_FAIL\";\r\n\r\nexport const handleForecastData = city => dispatch => {\r\n    dispatch({\r\n        type: REQUEST\r\n    });\r\n\r\n    const httpService = new HttpService();\r\n\r\n    httpService\r\n        .getWeatherData(city)\r\n        .then(res => {\r\n            const data = res;\r\n            dispatch({\r\n                type: REQUEST_SUCCESS,\r\n                payload: data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: REQUEST_FAIL,\r\n                payload: err,\r\n                error: true\r\n            });\r\n        });\r\n};\r\n","import {\r\n    REQUEST,\r\n    REQUEST_SUCCESS,\r\n    REQUEST_FAIL\r\n} from \"../actions/forecastData\";\r\n\r\nexport const initialState = {\r\n    data: null,\r\n    isFetching: false\r\n};\r\n\r\nexport function forecastReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case REQUEST:\r\n            return { ...state, isFetching: true };\r\n        case REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: action.payload\r\n            };\r\n        case REQUEST_FAIL:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const CURRENT_FORECAST = \"CURRENT_FORECAST\";\r\n\r\nexport const updateCurrentForecast = data => ({\r\n    type: CURRENT_FORECAST,\r\n    payload: data\r\n});\r\n","import { CURRENT_FORECAST } from \"../actions/updateCurrentForecast\";\r\n\r\nexport const initialState = {\r\n    currentForecastData: null\r\n};\r\n\r\nexport function currentForecastReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case CURRENT_FORECAST:\r\n            return { ...state, currentForecastData: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const UPDATE_HISTORY_LIST = \"UPDATE_HISTORY_LIST\";\r\n\r\nexport const updateHistoryList = historyList => ({\r\n    type: UPDATE_HISTORY_LIST,\r\n    payload: historyList\r\n});\r\n","import { UPDATE_HISTORY_LIST } from \"../actions/updateHistoryList\";\r\n\r\nconst historyList = localStorage.getItem(\"historyList\")\r\n    ? JSON.parse(localStorage.getItem(\"historyList\"))\r\n    : [];\r\n\r\nexport const initialState = {\r\n    data: historyList\r\n};\r\n\r\nexport function historyListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_HISTORY_LIST:\r\n            localStorage.setItem(\"historyList\", JSON.stringify(action.payload));\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const UPDATE_FAVOURITES_LIST = \"UPDATE_FAVOURITES_LIST\";\r\n\r\nexport const updateFavouritesList = favouritesList => ({\r\n    type: \"UPDATE_FAVOURITES_LIST\",\r\n    payload: favouritesList\r\n});\r\n","import { UPDATE_FAVOURITES_LIST } from \"../actions/updateFavouritesList\";\r\n\r\nconst favouritesList = localStorage.getItem(\"favouritesList\")\r\n    ? JSON.parse(localStorage.getItem(\"favouritesList\"))\r\n    : [];\r\n\r\nexport const initialState = {\r\n    data: favouritesList\r\n};\r\n\r\nexport function favouritesListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_FAVOURITES_LIST:\r\n            localStorage.setItem(\r\n                \"favouritesList\",\r\n                JSON.stringify(action.payload)\r\n            );\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { unitsReducer } from \"./units\";\r\nimport { placeReducer } from \"./place\";\r\nimport { themeColorReducer } from \"./theme\";\r\nimport { forecastReducer } from \"./forecast\";\r\nimport { currentForecastReducer } from \"./currentForecast\";\r\nimport { historyListReducer } from \"./historyList\";\r\nimport { favouritesListReducer } from \"./favouritesList\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    unit: unitsReducer,\r\n    place: placeReducer,\r\n    color: themeColorReducer,\r\n    forecastData: forecastReducer,\r\n    currentForecastData: currentForecastReducer,\r\n    historyList: historyListReducer,\r\n    favouritesList: favouritesListReducer\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { updateFavouritesList } from \"../../actions/updateFavouritesList\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class FavouritesButton extends Component {\r\n    checkPlaceInFavouritesList(place) {\r\n        // console.log(this.props);\r\n\r\n        const { favouritesList, updateButtonClass } = this.props;\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (!matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n            updateButtonClass(updatedFavPlaceObj);\r\n            place.isFavourite = undefined;\r\n            favouritesList.push(place);\r\n            const filteredList = [...favouritesList];\r\n            store.dispatch(updateFavouritesList(filteredList));\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n\r\n            const filteredList = favouritesList.filter(\r\n                item => item.placeId !== place.placeId\r\n            );\r\n            store.dispatch(updateFavouritesList(filteredList));\r\n            updateButtonClass(updatedFavPlaceObj);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { place } = this.props;\r\n        const { isFavourite } = place;\r\n        const checkActiveClass = isFavourite ? \"add-to-favourite-active\" : \"\";\r\n\r\n        return (\r\n            <button\r\n                className={`add-to-favourite ${checkActiveClass}`}\r\n                onClick={() => this.checkPlaceInFavouritesList(place)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    // console.log(store);\r\n    return {\r\n        favouritesList: store.favouritesList.data,\r\n        place: store.place\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(FavouritesButton);\r\n\r\nFavouritesButton.propTypes = {\r\n    place: PropTypes.object,\r\n    updateButtonClass: PropTypes.func.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { setUnit } from \"../../actions/unit\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport { unitsList } from \"../../utils/constants\";\r\n\r\nexport class UnitsSwitcher extends Component {\r\n    renderTemplateList() {\r\n        return unitsList.map(({ name, degreesUnit }) => (\r\n            <option value={name} key={generateID()}>\r\n                {degreesUnit}\r\n            </option>\r\n        ));\r\n    }\r\n\r\n    switchUnit({ target }) {\r\n        const { value } = target;\r\n        store.dispatch(setUnit(value));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select className=\"temperature-units\" onChange={this.switchUnit}>\r\n                {this.renderTemplateList()}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UnitsSwitcher;\r\n","import React, { Component } from \"react\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { connect } from \"react-redux\";\r\nimport { FavouritesButton } from \"../FavouritesButton\";\r\nimport { UnitsSwitcher } from \"../UnitsSwitcher\";\r\nimport { setPlace } from \"../../actions/place\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = React.createRef();\r\n        this.checkPlaceInHistoryList = this.checkPlaceInHistoryList.bind(this);\r\n        this.placeInfo = {};\r\n    }\r\n\r\n    getDataStatusCode = data =>\r\n        data.data ? data.data[0].cod.toString() : null;\r\n\r\n    checkPlaceInHistoryList(place) {\r\n        const { historyList } = this.props;\r\n        const matchedItem = historyList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (!matchedItem) {\r\n            historyList.push(place);\r\n            this.props.handleHistoryList(historyList);\r\n        }\r\n    }\r\n\r\n    checkPlaceInFavouritesList(place) {\r\n        const { favouritesList } = this.props;\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n\r\n            this.props.place(updatedFavPlaceObj);\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n            this.props.place(updatedFavPlaceObj);\r\n        }\r\n    }\r\n\r\n    performSearch(place) {\r\n        const formattedPlaceName = place.formatted_address.split(\",\")[0];\r\n        this.props.handleForecastData(formattedPlaceName);\r\n        this.props.handleCurrentForecastData(null);\r\n\r\n        const { formatted_address, place_id } = place;\r\n\r\n        const placeObj = {\r\n            place: place.address_components[0].long_name,\r\n            formattedPlace: formatted_address,\r\n            placeId: place_id\r\n        };\r\n\r\n        this.checkPlaceInHistoryList(placeObj);\r\n        this.checkPlaceInFavouritesList(placeObj);\r\n\r\n        this.inputRef.current.refs.input.value = \"\";\r\n    }\r\n\r\n    render() {\r\n        const { setPlaceAction } = this.props;\r\n\r\n        return (\r\n            <div className=\"search-block\">\r\n                <FavouritesButton\r\n                    place={this.placeInfo}\r\n                    updateButtonClass={setPlaceAction}\r\n                ></FavouritesButton>\r\n                <Autocomplete\r\n                    className=\"main-search-input\"\r\n                    onPlaceSelected={this.performSearch.bind(this)}\r\n                    autoFocus\r\n                    ref={this.inputRef}\r\n                />\r\n                <UnitsSwitcher></UnitsSwitcher>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        historyList: store.historyList.data,\r\n        favouritesList: store.favouritesList.data\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setPlaceAction: place => dispatch(setPlace(place))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchBar);\r\n\r\nSearchBar.propTypes = {\r\n    handleForecastData: PropTypes.func.isRequired,\r\n    handleCurrentForecastData: PropTypes.func.isRequired,\r\n    handleHistoryList: PropTypes.func.isRequired,\r\n    place: PropTypes.func\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchBar } from \"../components/Searchbar\";\r\nimport { setPlace } from \"../actions/place\";\r\nimport { handleForecastData } from \"../actions/forecastData\";\r\nimport { updateCurrentForecast } from \"../actions/updateCurrentForecast\";\r\nimport { updateHistoryList } from \"../actions/updateHistoryList\";\r\n\r\nclass SearchBarContainer extends React.Component {\r\n    render() {\r\n        const {\r\n            setPlaceAction,\r\n            getForecastDataAction,\r\n            setCurrentForecastAction,\r\n            updateHistoryListAction\r\n        } = this.props;\r\n        return (\r\n            <SearchBar\r\n                handleForecastData={getForecastDataAction}\r\n                handleCurrentForecastData={setCurrentForecastAction}\r\n                handleHistoryList={updateHistoryListAction}\r\n                place={setPlaceAction}\r\n            ></SearchBar>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        page: store.page\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setPlaceAction: place => dispatch(setPlace(place)),\r\n        getForecastDataAction: city => dispatch(handleForecastData(city)),\r\n        setCurrentForecastAction: data => dispatch(updateCurrentForecast(data)),\r\n        updateHistoryListAction: historyList =>\r\n            dispatch(updateHistoryList(historyList))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchBarContainer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getDayFromDateString } from \"../../utils/constants\";\r\nimport { getcurrentDateString } from \"../../utils/constants\";\r\nimport { defineWindDirection } from \"../../utils/constants\";\r\nimport { convertPressure } from \"../../utils/constants\";\r\nimport { generateIconClass } from \"../../utils/constants\";\r\nimport { convertTemperatureUnits } from \"../../utils/constants\";\r\nimport { convertWindUnits } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class CurrentForecast extends Component {\r\n    renderTemplate() {\r\n        const { name, dt, main, wind, weather } = this.props.forecastData;\r\n        const { unit } = this.props;\r\n\r\n        const setIconClassName = `weather-icon-current ${generateIconClass(\r\n            weather[0].icon\r\n        )}`;\r\n\r\n        return (\r\n            <div className=\"forecast-current\">\r\n                <div className=\"city-name\">{name}</div>\r\n                <div className=\"forecast-details\">\r\n                    <div className=\"forecast-item\">\r\n                        <div className=\"forecast-item-text forecast-item-text-day\">\r\n                            {getDayFromDateString(dt)}\r\n                        </div>\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-date\">\r\n                            {getcurrentDateString(dt)}\r\n                        </div>\r\n\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-pressure\">\r\n                            {`${convertPressure(main.pressure)} mm Hg`}\r\n                        </div>\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-wind\">\r\n                            {`${convertWindUnits(\r\n                                wind.speed,\r\n                                unit\r\n                            )}, ${defineWindDirection(wind.deg)}`}\r\n                        </div>\r\n\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-humidity\">\r\n                            <span className=\"humidity-icon\" />\r\n                            {main.humidity} %\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"forecast-item\">\r\n                        <div className={setIconClassName}></div>\r\n                        <div className=\"weather-icon-description\">\r\n                            {weather[0].description}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"forecast-item\">\r\n                        <div className=\"forecast-item-temps\">\r\n                            <div className=\"temp-min\">\r\n                                {convertTemperatureUnits(main.temp_min, unit)}\r\n                            </div>\r\n                            <div className=\"temp-max\">\r\n                                {convertTemperatureUnits(main.temp_max, unit)}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"forecast-item-tempcurrent\">\r\n                            {convertTemperatureUnits(main.temp, unit)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.renderTemplate();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    console.log(store);\r\n    return {\r\n        unit: store.unit.unit\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CurrentForecast);\r\n\r\nCurrentForecast.propTypes = {\r\n    forecastData: PropTypes.object\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { formatDateValue } from \"../../utils/constants\";\r\nimport { generateIconClass } from \"../../utils/constants\";\r\nimport { getDayFromDateString } from \"../../utils/constants\";\r\nimport { convertTemperatureUnits } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class WeatherForecastItem extends Component {\r\n    render() {\r\n        const { forecastData, unit } = this.props;\r\n        const setIconClassName = `day-forecast-weather ${generateIconClass(\r\n            forecastData.weather[0].icon\r\n        )}`;\r\n\r\n        return (\r\n            <div\r\n                className=\"forecast-nearest-day-item\"\r\n                onClick={() => this.props.updateHandler(forecastData)}\r\n            >\r\n                <h3 className=\"day-title\">\r\n                    {formatDateValue(forecastData.dt_txt)}\r\n                </h3>\r\n                <div className=\"day-forecast-dayname\">\r\n                    {getDayFromDateString(forecastData.dt, \"short\")}\r\n                </div>\r\n                <div className=\"day-forecast-temp\">\r\n                    {convertTemperatureUnits(forecastData.main.temp, unit)}\r\n                </div>\r\n                <div className={setIconClassName} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        unit: store.unit.unit\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(WeatherForecastItem);\r\n\r\nWeatherForecastItem.propTypes = {\r\n    forecastData: PropTypes.object,\r\n    place: PropTypes.string\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { CurrentForecast } from \"../CurrentForecast\";\r\nimport { WeatherForecastItem } from \"../WeatherForecastItem\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateCurrentForecast } from \"../../actions/updateCurrentForecast\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class WeatherForecast extends Component {\r\n    renderTemplate() {\r\n        const {\r\n            data,\r\n            isFetching,\r\n            place,\r\n            currentForecast,\r\n            setCurrentForecast\r\n        } = this.props;\r\n\r\n        const { currentForecastData } = currentForecast;\r\n        const dataCode = data ? +data[0].cod : null;\r\n\r\n        const createSortedList = list => {\r\n            const hoursForecastList = [];\r\n            const indexesList = [3, 11, 19, 27, 35];\r\n\r\n            indexesList.forEach(item => {\r\n                hoursForecastList.push(list[item]);\r\n            });\r\n\r\n            return hoursForecastList;\r\n        };\r\n\r\n        const renderCurrentForecast = () => {\r\n            if (data) {\r\n                if (dataCode <= 400) {\r\n                    return (\r\n                        <CurrentForecast\r\n                            forecastData={data ? data[0] : null}\r\n                        ></CurrentForecast>\r\n                    );\r\n                } else if (dataCode === 404) {\r\n                    return <p>City not found!</p>;\r\n                } else {\r\n                    return <p>There is some problems with API</p>;\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        const renderCurrentForecastFromItems = () => {\r\n            const placeObj = {\r\n                name: place\r\n            };\r\n\r\n            const finalCurrentForecastData = Object.assign(\r\n                currentForecastData,\r\n                placeObj\r\n            );\r\n\r\n            return finalCurrentForecastData ? (\r\n                <CurrentForecast\r\n                    forecastData={\r\n                        finalCurrentForecastData\r\n                            ? finalCurrentForecastData\r\n                            : null\r\n                    }\r\n                ></CurrentForecast>\r\n            ) : (\r\n                \"\"\r\n            );\r\n        };\r\n\r\n        const finalDaysForecastList =\r\n            data && dataCode === 200 ? createSortedList(data[1].list) : null;\r\n\r\n        const weatherForecastItemsList = finalDaysForecastList\r\n            ? finalDaysForecastList.map(item => {\r\n                  return (\r\n                      <WeatherForecastItem\r\n                          forecastData={item}\r\n                          place={place.place}\r\n                          key={generateID()}\r\n                          updateHandler={setCurrentForecast}\r\n                      ></WeatherForecastItem>\r\n                  );\r\n              })\r\n            : \"\";\r\n\r\n        const renderForecastDaysList = () => {\r\n            if (data) {\r\n                if (dataCode <= 400) {\r\n                    return (\r\n                        <div className=\"forecast-nearest-days\">\r\n                            {weatherForecastItemsList}\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        if (isFetching) {\r\n            return <p className=\"loading\">Loading...</p>;\r\n        } else {\r\n            return (\r\n                <div className=\"search-results-container\">\r\n                    {!currentForecastData\r\n                        ? renderCurrentForecast()\r\n                        : renderCurrentForecastFromItems()}\r\n                    {renderForecastDaysList()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.renderTemplate();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currentForecast: store.currentForecastData\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentForecast: data => dispatch(updateCurrentForecast(data))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WeatherForecast);\r\n\r\nWeatherForecast.propTypes = {\r\n    data: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\r\n    error: PropTypes.string,\r\n    isFetching: PropTypes.bool\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { WeatherForecast } from \"../components/WeatherForecast\";\r\n\r\nclass WeatherForecastContainer extends React.Component {\r\n    render() {\r\n        const { forecastData, place } = this.props;\r\n        return (\r\n            <WeatherForecast\r\n                data={forecastData.data}\r\n                isFetching={forecastData.isFetching}\r\n                place={place}\r\n            ></WeatherForecast>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        forecastData: store.forecastData,\r\n        place: store.place.place\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(WeatherForecastContainer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { handleForecastData } from \"../../actions/forecastData\";\r\nimport { setPlace } from \"../../actions/place\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class ActivityListItem extends Component {\r\n    updateForecast() {\r\n        const placeObj = this.props.place;\r\n        const { place } = placeObj;\r\n        store.dispatch(handleForecastData(place));\r\n        this.checkPlaceInFavouritesList(placeObj);\r\n    }\r\n\r\n    checkPlaceInFavouritesList(place) {\r\n        const { favouritesList } = this.props;\r\n\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n\r\n            store.dispatch(setPlace(updatedFavPlaceObj));\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n            store.dispatch(setPlace(updatedFavPlaceObj));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { formattedPlace } = this.props.place;\r\n\r\n        return (\r\n            <li\r\n                className=\"user-activity-list-item\"\r\n                onClick={this.updateForecast.bind(this)}\r\n            >\r\n                {formattedPlace}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        favouritesList: store.favouritesList.data\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ActivityListItem);\r\n\r\nActivityListItem.propTypes = {\r\n    place: PropTypes.object.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { ActivityListItem } from \"../ActivityListItem\";\r\nimport { updateFavouritesList } from \"../../actions/updateFavouritesList\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\nexport class FavouritesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.favouritesListRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        new PerfectScrollbar(this.favouritesListRef.current);\r\n    }\r\n\r\n    renderFavouritesList() {\r\n        const { favouritesList } = this.props;\r\n\r\n        return favouritesList.map(item => (\r\n            <ActivityListItem\r\n                place={item}\r\n                key={generateID()}\r\n            ></ActivityListItem>\r\n        ));\r\n    }\r\n\r\n    clearFavouritesList() {\r\n        const emptyList = [];\r\n        store.dispatch(updateFavouritesList(emptyList));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-activity-item\">\r\n                <div className=\"user-activity-header\">\r\n                    <h3 className=\"user-activity-title user-activity-title-fav\">\r\n                        favourite\r\n                    </h3>\r\n                    <button\r\n                        className=\"remove-button\"\r\n                        onClick={this.clearFavouritesList}\r\n                    />\r\n                </div>\r\n                <div className=\"user-activity-content\">\r\n                    <ul\r\n                        className=\"user-activity-list\"\r\n                        ref={this.favouritesListRef}\r\n                    >\r\n                        {this.renderFavouritesList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FavouritesList;\r\n\r\nFavouritesList.propTypes = {\r\n    favouritesList: PropTypes.array.isRequired\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FavouritesList } from \"../components/FavouritesList\";\r\n\r\nclass FavouritesListContainer extends React.Component {\r\n    render() {\r\n        const { favouritesList } = this.props;\r\n        return (\r\n            <FavouritesList favouritesList={favouritesList}></FavouritesList>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        favouritesList: store.favouritesList.data\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(FavouritesListContainer);\r\n","import React, { Component } from \"react\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { ActivityListItem } from \"../ActivityListItem\";\r\nimport { updateHistoryList } from \"../../actions/updateHistoryList\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\nexport class HistoryList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.historyListRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        new PerfectScrollbar(this.historyListRef.current);\r\n    }\r\n\r\n    renderHistoryItemsList() {\r\n        const historyList = this.props.historyList;\r\n        return historyList.map(item => (\r\n            <ActivityListItem\r\n                place={item}\r\n                key={generateID()}\r\n            ></ActivityListItem>\r\n        ));\r\n    }\r\n\r\n    clearHistoryList() {\r\n        const emptyList = [];\r\n        store.dispatch(updateHistoryList(emptyList));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-activity-item\">\r\n                <div className=\"user-activity-header\">\r\n                    <h3 className=\"user-activity-title user-activity-title-history\">\r\n                        recently viewed\r\n                    </h3>\r\n                    <button\r\n                        className=\"remove-button\"\r\n                        onClick={this.clearHistoryList}\r\n                    />\r\n                </div>\r\n                <div className=\"user-activity-content\">\r\n                    <ul\r\n                        className=\"user-activity-list\"\r\n                        ref={this.historyListRef}\r\n                    >\r\n                        {this.renderHistoryItemsList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistoryList;\r\n\r\nHistoryList.propTypes = {\r\n    historyList: PropTypes.array.isRequired\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { HistoryList } from \"../components/HistoryList\";\r\n\r\nclass HistoryListContainer extends React.Component {\r\n    render() {\r\n        const { historyList } = this.props;\r\n        return <HistoryList historyList={historyList}></HistoryList>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        historyList: store.historyList.data\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(HistoryListContainer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { setThemeColor } from \"../../actions/themeColor\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport { colorsList } from \"../../utils/constants\";\r\nimport \"./ThemeColorSwitcher.scss\";\r\n\r\nexport class ThemeColorSwitcher extends Component {\r\n    changeColorThemeHandler({ target }) {\r\n        const { value } = target;\r\n        store.dispatch(setThemeColor(value));\r\n    }\r\n\r\n    renderTemplate() {\r\n        const { themeColor } = this.props;\r\n\r\n        return colorsList.map(color => (\r\n            <div className=\"color-switcher__item\" key={generateID()}>\r\n                <label className=\"color-switcher-label\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"color\"\r\n                        value={color}\r\n                        className=\"color-switcher-input hidden-input\"\r\n                        onChange={this.changeColorThemeHandler.bind(this)}\r\n                        checked={color === themeColor}\r\n                    />\r\n                    <span className=\"color-switcher-name\">{color}</span>\r\n                </label>\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"color-switcher\">\r\n                <p>Choose color theme: </p>\r\n                {this.renderTemplate()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeColor: store.color.color\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ThemeColorSwitcher);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SearchBarContainer from \"../../containers/SearchBarContainer\";\r\nimport WeatherForecastContainer from \"../../containers/WeatherForecastContainer\";\r\nimport FavouritesListContainer from \"../../containers/FavouritesListContainer\";\r\nimport HistoryListContainer from \"../../containers/HistoryListContainer\";\r\nimport { ThemeColorSwitcher } from \"../ThemeColorSwitcher\";\r\nimport \"../../styles/scss/main.scss\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const { themeColor } = this.props;\r\n\r\n        return (\r\n            <div className={`App ${themeColor}`}>\r\n                <main className=\"main\">\r\n                    <div className=\"app-container\">\r\n                        <h1 className=\"main-title\">Weather application</h1>\r\n                        <ThemeColorSwitcher></ThemeColorSwitcher>\r\n                        <SearchBarContainer></SearchBarContainer>\r\n                        <WeatherForecastContainer></WeatherForecastContainer>\r\n                        <div className=\"user-activity-wrap\">\r\n                            <FavouritesListContainer></FavouritesListContainer>\r\n                            <HistoryListContainer></HistoryListContainer>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeColor: store.color.color\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/configureStore\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}