{"version":3,"sources":["reducers/units.js","reducers/place.js","reducers/theme.js","utils/constants.js","services/dataService.js","actions/forecastDataAction.js","reducers/forecast.js","reducers/currentForecast.js","reducers/historyList.js","reducers/favouritesList.js","reducers/index.js","store/configureStore.js","actions/updateFavouritesList.js","components/FavouritesButton/FavouritesButton.js","components/UnitsSwitcher/UnitsSwitcher.js","actions/placeAction.js","components/Searchbar/SearchBar.js","components/CurrentForecast/CurrentForecast.js","components/WeatherForecastItem/WeatherForecastItem.js","actions/updateCurrentForecast.js","components/WeatherForecast/WeatherForecast.js","components/ActivityListItem/ActivityListItem.js","actions/updateHistoryList.js","components/HistoryList/HistoryList.js","components/FavouritesList/FavouritesList.js","components/ThemeColorSwitcher/ThemeColorSwitcher.js","actions/themeColorAction.js","containers/App.js","index.js"],"names":["initialState","unit","place","placeId","formattedPlace","isFavourite","color","localStorage","getItem","JSON","parse","apiKey","generateIconClass","iconString","generateID","Math","random","toString","substr","colorsList","getDayFromDateString","milliseconds","type","arguments","length","undefined","Intl","DateTimeFormat","weekday","format","convertTemperatureUnits","value","units","concat","round","HttpService","Object","classCallCheck","this","createClass","key","url","city","urlsArray","getWeatherURLS","Promise","all","map","u","fetch","then","responses","res","json","requestURL","response","catch","error","console","REQUEST","REQUEST_SUCCESS","REQUEST_FAIL","handleForecastData","dispatch","getWeatherData","payload","err","data","isFetching","currentForecastData","rootReducer","combineReducers","state","action","log","assign","objectSpread","setItem","stringify","forecastData","historyList","favouritesList","store","createStore","applyMiddleware","thunk","updateFavouritesList","FavouritesButton","_Component","possibleConstructorReturn","getPrototypeOf","apply","inherits","_this$props","props","updateButtonClass","find","item","updatedFavPlaceObj","filteredList","filter","push","toConsumableArray","_this","checkActiveClass","react_default","a","createElement","className","onClick","checkPlaceInFavouritesList","Component","connect","UnitsSwitcher","setPlace","SearchBar","call","getDataStatusCode","cod","inputRef","React","createRef","checkPlaceInHistoryList","bind","assertThisInitialized","placeInfo","handleHistoryList","formattedPlaceName","formatted_address","split","handleCurrentForecastData","place_id","placeObj","address_components","long_name","current","refs","input","setPlaceAction","components_FavouritesButton_FavouritesButton","react_google_autocomplete_default","onPlaceSelected","performSearch","autoFocus","ref","components_UnitsSwitcher_UnitsSwitcher","CurrentForecast","pressureValue","_this$props$forecastD","name","dt","main","wind","weather","setIconClassName","icon","date","Date","getcurrentDateString","pressure","speed","toFixed","degrees","windDirectionString","defineWindDirection","deg","humidity","description","temp_min","temp_max","temp","renderTemplate","WeatherForecastItem","updateHandler","dateString","firstStringPartArray","formatDateValue","dt_txt","updateCurrentForecast","WeatherForecast","currentForecast","setCurrentForecast","dataCode","finalDaysForecastList","list","hoursForecastList","forEach","createSortedList","weatherForecastItemsList","components_WeatherForecastItem_WeatherForecastItem","finalCurrentForecastData","components_CurrentForecast_CurrentForecast","renderCurrentForecastFromItems","ActivityListItem","updateForecast","updateHistoryList","HistoryList","historyListRef","PerfectScrollbar","components_ActivityListItem_ActivityListItem","clearHistoryList","renderHistoryItemsList","FavouritesList","favouritesListRef","clearFavouritesList","renderFavouritesList","ThemeColorSwitcher","_ref","target","themeColor","onChange","changeColorThemeHandler","checked","App","getForecastDataAction","setCurrentForecastAction","updateHistoryListAction","components_ThemeColorSwitcher_ThemeColorSwitcher","Searchbar_SearchBar","components_WeatherForecast_WeatherForecast","components_FavouritesList_FavouritesList","components_HistoryList_HistoryList","ReactDOM","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.ecd920ed.chunk.js","sourcesContent":["export const initialState = {\r\n    unit: \"Metric\"\r\n};\r\n\r\nexport function unitsReducer(state = initialState) {\r\n    return state;\r\n}\r\n","export const initialState = {\r\n    place: \"Kyiv\",\r\n    placeId: \"\",\r\n    formattedPlace: \"\",\r\n    isFavourite: false\r\n};\r\n\r\nexport function placeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"SET_PLACE\":\r\n            console.log(action.payload);        \r\n            return Object.assign({ ...state }, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const defaultThemeColor = localStorage.getItem(\"themeColor\")\r\n    ? JSON.parse(localStorage.getItem(\"themeColor\"))\r\n    : \"dark\";\r\n\r\nexport const initialState = {\r\n    color: defaultThemeColor\r\n};\r\n\r\nexport function themeColorReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"SET_THEME_COLOR\":\r\n            localStorage.setItem(\"themeColor\", JSON.stringify(action.payload));\r\n            return { ...state, color: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const pascalToMmHg = 0.75006;\r\nconst coefficientImperial = 2.2369;\r\n\r\nexport const currentWeaterURLString =\r\n    \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\nexport const weatherForecastURLString =\r\n    \"https://api.openweathermap.org/data/2.5/forecast?q=\";\r\nexport const apiKey = \"c1bfe9b98646ae15af74164518f99538\";\r\n\r\nexport const scrollableBlockWrapClassFavourite = \"user-activity-list-favourite\";\r\n\r\nexport const scrollableBlockWrapClassHistory = \"user-activity-list-history\";\r\n\r\nexport const formatValue = value => (value ? Math.round(value) : \"\");\r\n\r\nexport const checkProperty = property => (property ? property : \"\");\r\n\r\nexport const getCurrentDate = () => {\r\n    const currDate = new Date();\r\n    const day = String(currDate.getDate()).padStart(2, \"0\");\r\n    const month = String(currDate.getMonth() + 1).padStart(2, \"0\");\r\n    const year = currDate.getFullYear();\r\n    const finalDate = `${day}/${month}/${year}`;\r\n\r\n    return finalDate;\r\n};\r\n\r\nexport const getcurrentDateString = milliseconds => {\r\n    if (!milliseconds) {\r\n        return;\r\n    }\r\n\r\n    const date = new Date(milliseconds);\r\n    return new Intl.DateTimeFormat(\"en-GB\").format(date * 1000);\r\n};\r\n\r\nexport const getCurrentDayName = () => {\r\n    const currDate = new Date();\r\n    const days = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\"\r\n    ];\r\n    const day = new Date(currDate);\r\n    const dayName = days[day.getDay()];\r\n\r\n    return dayName;\r\n};\r\n\r\nexport const convertPressure = pressureValue => {\r\n    if (!pressureValue) {\r\n        return \"\";\r\n    }\r\n\r\n    return Math.round(pressureValue * pascalToMmHg);\r\n};\r\n\r\nexport const defineWindDirection = degrees => {\r\n    let windDirectionString = \"\";\r\n\r\n    if (!degrees) {\r\n        return \"\";\r\n    } else {\r\n        if (degrees <= 22.5 || (degrees > 337.5 && degrees <= 360)) {\r\n            windDirectionString = \"North\";\r\n        } else if (degrees > 22.5 && degrees < 67.5) {\r\n            windDirectionString = \"North-East\";\r\n        } else if (degrees > 67.5 && degrees < 112.5) {\r\n            windDirectionString = \"East\";\r\n        } else if (degrees > 112.5 && degrees < 157.5) {\r\n            windDirectionString = \"South-East\";\r\n        } else if (degrees > 157.5 && degrees < 202.5) {\r\n            windDirectionString = \"South\";\r\n        } else if (degrees > 202.5 && degrees < 247.5) {\r\n            windDirectionString = \"South-West\";\r\n        } else if (degrees > 247.5 && degrees < 292.5) {\r\n            windDirectionString = \"West\";\r\n        } else if (degrees > 292.5 && degrees < 337.5) {\r\n            windDirectionString = \"North-West\";\r\n        }\r\n\r\n        return windDirectionString;\r\n    }\r\n};\r\n\r\nexport const formatDateValue = dateString => {\r\n    if (!dateString) {\r\n        return;\r\n    }\r\n\r\n    const firstStringPartArray = dateString.split(\" \")[0].split(\"-\");\r\n\r\n    return `${firstStringPartArray[2]}/${firstStringPartArray[1]}`;\r\n};\r\n\r\nexport const generateIconClass = iconString => {\r\n    let finalIconClass = \"\";\r\n\r\n    if (!iconString) {\r\n        return;\r\n    } else {\r\n        if (iconString === \"01d\" || iconString === \"01n\") {\r\n            finalIconClass = \"day-forecast-weather-sunny\";\r\n        } else if (iconString === \"02d\" || iconString === \"02n\") {\r\n            finalIconClass = \"day-forecast-weather-cloudy-small\";\r\n        } else if (\r\n            iconString === \"03d\" ||\r\n            iconString === \"04d\" ||\r\n            iconString === \"50d\" ||\r\n            iconString === \"03n\" ||\r\n            iconString === \"04n\" ||\r\n            iconString === \"50n\"\r\n        ) {\r\n            finalIconClass = \"day-forecast-weather-cloudy\";\r\n        } else if (iconString === \"09d\" || iconString === \"09n\") {\r\n            finalIconClass = \"day-forecast-weather-shower-rain\";\r\n        } else if (iconString === \"10d\" || iconString === \"10n\") {\r\n            finalIconClass = \"day-forecast-weather-rain\";\r\n        } else if (iconString === \"11d\" || iconString === \"11n\") {\r\n            finalIconClass = \"day-forecast-weather-thunder\";\r\n        } else if (iconString === \"13d\" || iconString === \"13n\") {\r\n            finalIconClass = \"day-forecast-weather-snow\";\r\n        } else {\r\n            finalIconClass = \"\";\r\n        }\r\n    }\r\n\r\n    return finalIconClass;\r\n};\r\n\r\nexport const generateID = () => {\r\n    return (\r\n        \"_\" +\r\n        Math.random()\r\n            .toString(36)\r\n            .substr(2, 9)\r\n    );\r\n};\r\n\r\nexport const colorsList = [\"dark\", \"blue\", \"yellow\"];\r\n\r\nexport const getDayFromDateString = (milliseconds, type = \"long\") => {\r\n    return new Intl.DateTimeFormat(\"en-US\", { weekday: type }).format(\r\n        milliseconds * 1000\r\n    );\r\n};\r\n\r\nexport const convertTemperatureUnits = (value, units) => {\r\n    if (!value) {\r\n        return;\r\n    }\r\n\r\n    return units === \"C\"\r\n        ? `${Math.round(value)} °C`\r\n        : `${Math.round(value * 1.8 + 32)} °F`;\r\n};\r\n\r\nexport const convertWindUnits = (value, units) => {\r\n    if (!value) {\r\n        return \"\";\r\n    }\r\n\r\n    return units === \"C\"\r\n        ? `${value.toFixed(1)} m/s`\r\n        : `${(value * coefficientImperial).toFixed(1)} mph`;\r\n};\r\n\r\nexport const checkResponse = response => {\r\n    if (response.data.status === \"ok\") {\r\n        return true;\r\n    } else if (response.data.message) {\r\n        const message = response.data.message.split(\"_\").join(\" \");\r\n        throw new Error(message);\r\n    }\r\n    throw new Error(\"Something wrong\");\r\n};\r\n","import { apiKey } from \"../utils/constants\";\r\nimport { currentWeaterURLString } from \"../utils/constants\";\r\nimport { weatherForecastURLString } from \"../utils/constants\";\r\n\r\nexport class HttpService {\r\n    getWeatherURLS(url, city) {\r\n        return `${url}${city}&appid=${apiKey}&units=metric`;\r\n    }\r\n\r\n    getWeatherData(city) {\r\n        const urlsArray = [\r\n            this.getWeatherURLS(currentWeaterURLString, city),\r\n            this.getWeatherURLS(weatherForecastURLString, city)\r\n        ];\r\n\r\n        return Promise.all(urlsArray.map(u => fetch(u))).then(responses =>\r\n            Promise.all(responses.map(res => res.json()))\r\n        );\r\n    }\r\n\r\n    getForecast(url, city) {\r\n        const requestURL = `${url}${city}&appid=${apiKey}&units=metric`;\r\n\r\n        return fetch(requestURL)\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n}\r\n\r\nexport default HttpService;\r\n","import { HttpService } from \"../services/dataService\";\r\n\r\nexport const REQUEST = \"REQUEST\";\r\nexport const REQUEST_SUCCESS = \"REQUEST_SUCCESS\";\r\nexport const REQUEST_FAIL = \"REQUEST_FAIL\";\r\n\r\nexport const handleForecastData = city => dispatch => {\r\n    dispatch({\r\n        type: REQUEST\r\n    });\r\n\r\n    const httpService = new HttpService();\r\n\r\n    httpService\r\n        .getWeatherData(city)\r\n        .then(res => {\r\n            const data = res;\r\n            dispatch({\r\n                type: REQUEST_SUCCESS,\r\n                payload: data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: REQUEST_FAIL,\r\n                payload: err,\r\n                error: true\r\n            });\r\n        });\r\n};\r\n","import {\r\n    REQUEST,\r\n    REQUEST_SUCCESS,\r\n    REQUEST_FAIL\r\n} from \"../actions/forecastDataAction\";\r\n\r\nexport const initialState = {\r\n    data: null,\r\n    isFetching: false\r\n};\r\n\r\nexport function forecastReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case REQUEST:\r\n            return { ...state, isFetching: true };\r\n        case REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: action.payload\r\n            };\r\n        case REQUEST_FAIL:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                data: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const initialState = {\r\n    currentForecastData: null\r\n};\r\n\r\nexport function currentForecastReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"CURRENT_FORECAST\":\r\n            return { ...state, currentForecastData: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const historyList = localStorage.getItem(\"historyList\")\r\n    ? JSON.parse(localStorage.getItem(\"historyList\"))\r\n    : [];\r\n\r\nexport const initialState = {\r\n    data: historyList\r\n};\r\n\r\nexport function historyListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"UPDATE_HISTORY_LIST\":\r\n            localStorage.setItem(\"historyList\", JSON.stringify(action.payload));\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const favouritesList = localStorage.getItem(\"favouritesList\")\r\n    ? JSON.parse(localStorage.getItem(\"favouritesList\"))\r\n    : [];\r\n\r\nexport const initialState = {\r\n    data: favouritesList\r\n};\r\n\r\nexport function favouritesListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"UPDATE_FAVOURITES_LIST\":\r\n            localStorage.setItem(\r\n                \"favouritesList\",\r\n                JSON.stringify(action.payload)\r\n            );\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { unitsReducer } from \"./units\";\r\nimport { placeReducer } from \"./place\";\r\nimport { themeColorReducer } from \"./theme\";\r\nimport { forecastReducer } from \"./forecast\";\r\nimport { currentForecastReducer } from \"./currentForecast\";\r\nimport { historyListReducer } from \"./historyList\";\r\nimport { favouritesListReducer } from \"./favouritesList\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    units: unitsReducer,\r\n    place: placeReducer,\r\n    color: themeColorReducer,\r\n    forecastData: forecastReducer,\r\n    currentForecastData: currentForecastReducer,\r\n    historyList: historyListReducer,\r\n    favouritesList: favouritesListReducer\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\n// import logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","export const updateFavouritesList = favouritesList => ({\r\n    type: \"UPDATE_FAVOURITES_LIST\",\r\n    payload: favouritesList\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { updateFavouritesList } from \"../../actions/updateFavouritesList\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class FavouritesButton extends Component {\r\n    checkPlaceInFavouritesList(place) {\r\n        // console.log(this.props);\r\n\r\n        const { favouritesList, updateButtonClass } = this.props;\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (!matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n            updateButtonClass(updatedFavPlaceObj);\r\n            place.isFavourite = undefined;\r\n            favouritesList.push(place);\r\n            const filteredList = [...favouritesList];\r\n            store.dispatch(updateFavouritesList(filteredList));\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n\r\n            const filteredList = favouritesList.filter(\r\n                item => item.placeId !== place.placeId\r\n            );\r\n            store.dispatch(updateFavouritesList(filteredList));\r\n            updateButtonClass(updatedFavPlaceObj);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { place } = this.props;\r\n        const { isFavourite } = place;\r\n        const checkActiveClass = isFavourite ? \"add-to-favourite-active\" : \"\";\r\n\r\n        return (\r\n            <button\r\n                className={`add-to-favourite ${checkActiveClass}`}\r\n                onClick={() => this.checkPlaceInFavouritesList(place)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    // console.log(store);\r\n    return {\r\n        favouritesList: store.favouritesList.data,\r\n        place: store.place\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(FavouritesButton);\r\n\r\nFavouritesButton.propTypes = {\r\n    place: PropTypes.object,\r\n    updateButtonClass: PropTypes.func.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport class UnitsSwitcher extends Component {\r\n    render() {\r\n        return (\r\n            <select className=\"temperature-units\">\r\n                <option value=\"Celsius\">°C</option>\r\n                <option value=\"Farengheit\">°F</option>\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UnitsSwitcher;\r\n","export const setPlace = place => ({\r\n    type: \"SET_PLACE\",\r\n    payload: place\r\n});\r\n","import React, { Component } from \"react\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { connect } from \"react-redux\";\r\nimport { FavouritesButton } from \"../FavouritesButton\";\r\nimport { UnitsSwitcher } from \"../UnitsSwitcher\";\r\nimport { setPlace } from \"../../actions/placeAction\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = React.createRef();\r\n        this.checkPlaceInHistoryList = this.checkPlaceInHistoryList.bind(this);\r\n        this.placeInfo = {};\r\n    }\r\n\r\n    getDataStatusCode = data =>\r\n        data.data ? data.data[0].cod.toString() : null;\r\n\r\n    checkPlaceInHistoryList(place) {\r\n        const { historyList } = this.props;\r\n        const matchedItem = historyList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (!matchedItem) {\r\n            historyList.push(place);\r\n            this.props.handleHistoryList(historyList);\r\n        }\r\n    }\r\n\r\n    checkPlaceInFavouritesList(place) {\r\n        const { favouritesList } = this.props;\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n\r\n            this.props.place(updatedFavPlaceObj);\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n            this.props.place(updatedFavPlaceObj);\r\n        }\r\n    }\r\n\r\n    performSearch(place) {\r\n        const formattedPlaceName = place.formatted_address.split(\",\")[0];\r\n        this.props.handleForecastData(formattedPlaceName);\r\n        this.props.handleCurrentForecastData(null);\r\n\r\n        // const { statusCode } = this.props;\r\n\r\n        // console.log(this.props);\r\n\r\n        // console.log(statusCode);\r\n\r\n        // if (statusCode && statusCode === \"200\") {\r\n        //     this.checkPlaceInHistoryList(place);\r\n        // }\r\n\r\n        const { formatted_address, place_id } = place;\r\n\r\n        const placeObj = {\r\n            place: place.address_components[0].long_name,\r\n            formattedPlace: formatted_address,\r\n            placeId: place_id\r\n        };\r\n\r\n        this.checkPlaceInHistoryList(placeObj);\r\n        this.checkPlaceInFavouritesList(placeObj);\r\n\r\n        this.inputRef.current.refs.input.value = \"\";\r\n        // console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { setPlaceAction } = this.props;\r\n\r\n        return (\r\n            <div className=\"search-block\">\r\n                <FavouritesButton\r\n                    place={this.placeInfo}\r\n                    updateButtonClass={setPlaceAction}\r\n                ></FavouritesButton>\r\n                <Autocomplete\r\n                    className=\"main-search-input\"\r\n                    onPlaceSelected={this.performSearch.bind(this)}\r\n                    autoFocus\r\n                    ref={this.inputRef}\r\n                />\r\n                <UnitsSwitcher></UnitsSwitcher>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    // console.log(store);\r\n    return {\r\n        historyList: store.historyList.data,\r\n        favouritesList: store.favouritesList.data\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setPlaceAction: place => dispatch(setPlace(place))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchBar);\r\n\r\nSearchBar.propTypes = {\r\n    handleForecastData: PropTypes.func.isRequired,\r\n    handleCurrentForecastData: PropTypes.func.isRequired,\r\n    handleHistoryList: PropTypes.func.isRequired,\r\n    place: PropTypes.func\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { getDayFromDateString } from \"../../utils/constants\";\r\nimport { getcurrentDateString } from \"../../utils/constants\";\r\nimport { defineWindDirection } from \"../../utils/constants\";\r\nimport { convertPressure } from \"../../utils/constants\";\r\nimport { generateIconClass } from \"../../utils/constants\";\r\nimport { convertTemperatureUnits } from \"../../utils/constants\";\r\nimport { convertWindUnits } from \"../../utils/constants\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class CurrentForecast extends Component {\r\n    renderTemplate() {\r\n        const { name, dt, main, wind, weather } = this.props.forecastData;\r\n\r\n        const setIconClassName = `weather-icon-current ${generateIconClass(\r\n            weather[0].icon\r\n        )}`;\r\n\r\n        return (\r\n            <div className=\"forecast-current\">\r\n                <div className=\"city-name\">{name}</div>\r\n                <div className=\"forecast-details\">\r\n                    <div className=\"forecast-item\">\r\n                        <div className=\"forecast-item-text forecast-item-text-day\">\r\n                            {getDayFromDateString(dt)}\r\n                        </div>\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-date\">\r\n                            {getcurrentDateString(dt)}\r\n                        </div>\r\n\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-pressure\">\r\n                            {`${convertPressure(main.pressure)} mm Hg`}\r\n                        </div>\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-wind\">\r\n                            {`${convertWindUnits(\r\n                                wind.speed\r\n                            )}, ${defineWindDirection(wind.deg)}`}\r\n                        </div>\r\n\r\n                        <div className=\"forecast-item-text forecast-item-text-icon forecast-item-text-icon-humidity\">\r\n                            <span className=\"humidity-icon\" />\r\n                            {main.humidity} %\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"forecast-item\">\r\n                        <div className={setIconClassName}></div>\r\n                        <div className=\"weather-icon-description\">\r\n                            {weather[0].description}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"forecast-item\">\r\n                        <div className=\"forecast-item-temps\">\r\n                            <div className=\"temp-min\">\r\n                                {convertTemperatureUnits(main.temp_min, \"C\")}\r\n                            </div>\r\n                            <div className=\"temp-max\">\r\n                                {convertTemperatureUnits(main.temp_max, \"C\")}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"forecast-item-tempcurrent\">\r\n                            {convertTemperatureUnits(main.temp, \"C\")}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.renderTemplate();\r\n    }\r\n}\r\n\r\nexport default CurrentForecast;\r\n\r\nCurrentForecast.propTypes = {\r\n    forecastData: PropTypes.object\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { formatDateValue } from \"../../utils/constants\";\r\nimport { generateIconClass } from \"../../utils/constants\";\r\nimport { getDayFromDateString } from \"../../utils/constants\";\r\nimport { convertTemperatureUnits } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class WeatherForecastItem extends Component {\r\n    render() {\r\n        // console.log(\"itemForecast\", this.props);\r\n\r\n        const { forecastData } = this.props;\r\n\r\n        const setIconClassName = `day-forecast-weather ${generateIconClass(\r\n            forecastData.weather[0].icon\r\n        )}`;\r\n\r\n        return (\r\n            <div\r\n                className=\"forecast-nearest-day-item\"\r\n                onClick={() => this.props.updateHandler(forecastData)}\r\n            >\r\n                <h3 className=\"day-title\">\r\n                    {formatDateValue(forecastData.dt_txt)}\r\n                </h3>\r\n                <div className=\"day-forecast-dayname\">\r\n                    {getDayFromDateString(forecastData.dt, \"short\")}\r\n                </div>\r\n                <div className=\"day-forecast-temp\">\r\n                    {convertTemperatureUnits(forecastData.main.temp, \"C\")}\r\n                </div>\r\n                <div className={setIconClassName} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherForecastItem;\r\n\r\nWeatherForecastItem.propTypes = {\r\n    forecastData: PropTypes.object,\r\n    place: PropTypes.string\r\n};\r\n","export const updateCurrentForecast = data => ({\r\n    type: \"CURRENT_FORECAST\",\r\n    payload: data\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { CurrentForecast } from \"../CurrentForecast\";\r\nimport { WeatherForecastItem } from \"../WeatherForecastItem\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateCurrentForecast } from \"../../actions/updateCurrentForecast\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class WeatherForecast extends Component {\r\n    renderTemplate() {\r\n        const {\r\n            data,\r\n            isFetching,\r\n            place,\r\n            currentForecast,\r\n            setCurrentForecast\r\n        } = this.props;\r\n\r\n        // console.log(this.props);\r\n\r\n        const { currentForecastData } = currentForecast;\r\n        const dataCode = data ? +data[0].cod : null;\r\n\r\n        const createSortedList = list => {\r\n            const hoursForecastList = [];\r\n            const indexesList = [3, 11, 19, 27, 35];\r\n\r\n            indexesList.forEach(item => {\r\n                hoursForecastList.push(list[item]);\r\n            });\r\n\r\n            return hoursForecastList;\r\n        };\r\n\r\n        const renderCurrentForecast = () => {\r\n            if (data) {\r\n                if (dataCode <= 400) {\r\n                    return (\r\n                        <CurrentForecast\r\n                            forecastData={data ? data[0] : null}\r\n                        ></CurrentForecast>\r\n                    );\r\n                } else if (dataCode === 404) {\r\n                    return <p>City not found!</p>;\r\n                } else {\r\n                    return <p>There is some problems with API</p>;\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        const renderCurrentForecastFromItems = () => {\r\n            const placeObj = {\r\n                name: place\r\n            };\r\n\r\n            const finalCurrentForecastData = Object.assign(\r\n                currentForecastData,\r\n                placeObj\r\n            );\r\n\r\n            return finalCurrentForecastData ? (\r\n                <CurrentForecast\r\n                    forecastData={\r\n                        finalCurrentForecastData\r\n                            ? finalCurrentForecastData\r\n                            : null\r\n                    }\r\n                ></CurrentForecast>\r\n            ) : (\r\n                \"\"\r\n            );\r\n        };\r\n\r\n        const finalDaysForecastList =\r\n            data && dataCode === 200 ? createSortedList(data[1].list) : null;\r\n\r\n        const weatherForecastItemsList = finalDaysForecastList\r\n            ? finalDaysForecastList.map(item => {\r\n                  return (\r\n                      <WeatherForecastItem\r\n                          forecastData={item}\r\n                          place={place.place}\r\n                          key={generateID()}\r\n                          updateHandler={setCurrentForecast}\r\n                      ></WeatherForecastItem>\r\n                  );\r\n              })\r\n            : \"\";\r\n\r\n        const renderForecastDaysList = () => {\r\n            if (data) {\r\n                if (dataCode <= 400) {\r\n                    return (\r\n                        <div className=\"forecast-nearest-days\">\r\n                            {weatherForecastItemsList}\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        if (isFetching) {\r\n            return <p className=\"loading\">Loading...</p>;\r\n        } else {\r\n            return (\r\n                <div className=\"search-results-container\">\r\n                    {!currentForecastData\r\n                        ? renderCurrentForecast()\r\n                        : renderCurrentForecastFromItems()}\r\n                    {renderForecastDaysList()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.renderTemplate();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    // console.log(store);\r\n    return {\r\n        currentForecast: store.currentForecastData\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentForecast: data => dispatch(updateCurrentForecast(data))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WeatherForecast);\r\n\r\nWeatherForecast.propTypes = {\r\n    data: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\r\n    error: PropTypes.string,\r\n    isFetching: PropTypes.bool\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { handleForecastData } from \"../../actions/forecastDataAction\";\r\nimport { setPlace } from \"../../actions/placeAction\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class ActivityListItem extends Component {\r\n    updateForecast() {\r\n        const placeObj = this.props.place;\r\n        const { place } = placeObj;\r\n        store.dispatch(handleForecastData(place));\r\n        this.checkPlaceInFavouritesList(placeObj);\r\n    }\r\n\r\n    checkPlaceInFavouritesList(place) {\r\n        const { favouritesList } = this.props;\r\n\r\n        const matchedItem = favouritesList.find(\r\n            item => item.placeId === place.placeId\r\n        );\r\n\r\n        if (matchedItem) {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: true\r\n            });\r\n\r\n            store.dispatch(setPlace(updatedFavPlaceObj));\r\n        } else {\r\n            const updatedFavPlaceObj = Object.assign(place, {\r\n                isFavourite: false\r\n            });\r\n            store.dispatch(setPlace(updatedFavPlaceObj));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { formattedPlace } = this.props.place;\r\n\r\n        return (\r\n            <li\r\n                className=\"user-activity-list-item\"\r\n                onClick={this.updateForecast.bind(this)}\r\n            >\r\n                {formattedPlace}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        favouritesList: store.favouritesList.data\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ActivityListItem);\r\n\r\nActivityListItem.propTypes = {\r\n    place: PropTypes.object.isRequired\r\n};\r\n","export const updateHistoryList = historyList => ({\r\n    type: \"UPDATE_HISTORY_LIST\",\r\n    payload: historyList\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { ActivityListItem } from \"../ActivityListItem\";\r\nimport { updateHistoryList } from \"../../actions/updateHistoryList\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\nexport class HistoryList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.historyListRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        new PerfectScrollbar(this.historyListRef.current);\r\n    }\r\n\r\n    renderHistoryItemsList() {\r\n        const historyList = this.props.historyList;\r\n        return historyList.map(item => (\r\n            <ActivityListItem\r\n                place={item}\r\n                key={generateID()}\r\n            ></ActivityListItem>\r\n        ));\r\n    }\r\n\r\n    clearHistoryList() {\r\n        const emptyList = [];\r\n        store.dispatch(updateHistoryList(emptyList));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-activity-item\">\r\n                <div className=\"user-activity-header\">\r\n                    <h3 className=\"user-activity-title user-activity-title-history\">\r\n                        recently viewed\r\n                    </h3>\r\n                    <button\r\n                        className=\"remove-button\"\r\n                        onClick={this.clearHistoryList}\r\n                    />\r\n                </div>\r\n                <div className=\"user-activity-content\">\r\n                    <ul\r\n                        className=\"user-activity-list\"\r\n                        ref={this.historyListRef}\r\n                    >\r\n                        {this.renderHistoryItemsList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistoryList;\r\n\r\nHistoryList.propTypes = {\r\n    historyList: PropTypes.array.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { ActivityListItem } from \"../ActivityListItem\";\r\nimport { updateFavouritesList } from \"../../actions/updateFavouritesList\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\nexport class FavouritesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.favouritesListRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        new PerfectScrollbar(this.favouritesListRef.current);\r\n    }\r\n\r\n    renderFavouritesList() {\r\n        const { favouritesList } = this.props;\r\n\r\n        return favouritesList.map(item => (\r\n            <ActivityListItem\r\n                place={item}\r\n                key={generateID()}\r\n            ></ActivityListItem>\r\n        ));\r\n    }\r\n\r\n    clearFavouritesList() {\r\n        const emptyList = [];\r\n        store.dispatch(updateFavouritesList(emptyList));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-activity-item\">\r\n                <div className=\"user-activity-header\">\r\n                    <h3 className=\"user-activity-title user-activity-title-fav\">\r\n                        favourite\r\n                    </h3>\r\n                    <button\r\n                        className=\"remove-button\"\r\n                        onClick={this.clearFavouritesList}\r\n                    />\r\n                </div>\r\n                <div className=\"user-activity-content\">\r\n                    <ul\r\n                        className=\"user-activity-list\"\r\n                        ref={this.favouritesListRef}\r\n                    >\r\n                        {this.renderFavouritesList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FavouritesList;\r\n\r\nFavouritesList.propTypes = {\r\n    favouritesList: PropTypes.array.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { store } from \"../../store/configureStore\";\r\nimport { setThemeColor } from \"../../actions/themeColorAction\";\r\nimport { generateID } from \"../../utils/constants\";\r\nimport { colorsList } from \"../../utils/constants\";\r\nimport \"./ThemeColorSwitcher.scss\";\r\n\r\nexport class ThemeColorSwitcher extends Component {\r\n    changeColorThemeHandler({ target }) {\r\n        const { value } = target;\r\n        store.dispatch(setThemeColor(value));\r\n    }\r\n\r\n    renderTemplate() {\r\n        const { themeColor } = this.props;\r\n\r\n        return colorsList.map(color => {\r\n            return (\r\n                <div className=\"color-switcher__item\" key={generateID()}>\r\n                    <label className=\"color-switcher-label\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"color\"\r\n                            value={color}\r\n                            className=\"color-switcher-input hidden-input\"\r\n                            onChange={this.changeColorThemeHandler.bind(this)}\r\n                            checked={color === themeColor}\r\n                        />\r\n                        <span className=\"color-switcher-name\">{color}</span>\r\n                    </label>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"color-switcher\">\r\n                <p>Choose color theme: </p>\r\n                {this.renderTemplate()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeColor: store.color.color\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ThemeColorSwitcher);\r\n","export const setThemeColor = color => ({\r\n    type: \"SET_THEME_COLOR\",\r\n    payload: color\r\n});\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SearchBar } from \"../components/Searchbar\";\nimport { WeatherForecast } from \"../components/WeatherForecast\";\nimport { HistoryList } from \"../components/HistoryList\";\nimport { FavouritesList } from \"../components/FavouritesList\";\nimport { ThemeColorSwitcher } from \"../components/ThemeColorSwitcher\";\nimport { setPlace } from \"../actions/placeAction\";\nimport { handleForecastData } from \"../actions/forecastDataAction\";\nimport { updateCurrentForecast } from \"../actions/updateCurrentForecast\";\nimport { updateHistoryList } from \"../actions/updateHistoryList\";\nimport \"../styles/scss/main.scss\";\n\nclass App extends Component {\n    render() {\n        const {\n            setPlaceAction,\n            getForecastDataAction,\n            forecastData,\n            place,\n            setCurrentForecastAction,\n            themeColor,\n            updateHistoryListAction,\n            historyList,\n            favouritesList\n        } = this.props;\n\n        // console.log(this.props);\n\n        return (\n            <div className={`App ${themeColor}`}>\n                <main className=\"main\">\n                    <div className=\"app-container\">\n                        <h1 className=\"main-title\">Weather application</h1>\n                        <ThemeColorSwitcher></ThemeColorSwitcher>\n                        <SearchBar\n                            handleForecastData={getForecastDataAction}\n                            handleCurrentForecastData={setCurrentForecastAction}\n                            handleHistoryList={updateHistoryListAction}\n                            place={setPlaceAction}\n                        ></SearchBar>\n                        <WeatherForecast\n                            data={forecastData.data}\n                            isFetching={forecastData.isFetching}\n                            place={place}\n                        ></WeatherForecast>\n                        <div className=\"user-activity-wrap\">\n                            <FavouritesList\n                                favouritesList={favouritesList}\n                            ></FavouritesList>\n                            <HistoryList\n                                historyList={historyList}\n                            ></HistoryList>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = store => {\n    // console.log(store);\n    return {\n        // unit: store.unit,\n        themeColor: store.color.color,\n        forecastData: store.forecastData,\n        place: store.place.place,\n        historyList: store.historyList.data,\n        favouritesList: store.favouritesList.data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setPlaceAction: place => dispatch(setPlace(place)),\n        getForecastDataAction: city => dispatch(handleForecastData(city)),\n        setCurrentForecastAction: data => dispatch(updateCurrentForecast(data)),\n        updateHistoryListAction: historyList =>\n            dispatch(updateHistoryList(historyList))\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}